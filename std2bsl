#!/usr/bin/env python2.7
import re
import os
import sys
import argparse

cpp_headers = [
    'algorithm',
    'array',
    'atomic',
    'bitset',
    'cassert',
    # 'ccomplex', C++11, doesn't exist yet
    'cctype',
    'cerrno',
    'cfenv',
    'cfloat',
    'chrono',
    'cinttypes',
    'ciso646',
    'climits',
    'clocale',
    'cmath',
    # 'codecvt', C++11, doesn't exist yet
    'complex',
    'condition_variable',
    'csetjmp',
    'csignal',
    # 'cstdalign', C++11, doesn't exist yet
    'cstdarg',
    'cstdbool',
    'cstddef',
    'cstdint',
    'cstdio',
    'cstdlib',
    'cstring',
    'ctgmath',
    'ctime',
    'cuchar',
    'cwchar',
    'cwctype',
    'deque',
    'exception',
    # 'forward_list', C++11, doesn't exist yet
    'fstream',
    'functional',
    'future',
    'hash_map',
    'hash_set',
    'initializer_list',
    'iomanip',
    'ios',
    'iosfwd',
    'iostream',
    'istream',
    'iterator',
    'limits',
    'list',
    'locale',
    'map',
    'memory',
    'mutex',
    'new',
    'numeric',
    'ostream',
    'queue',
    'random',
    'ratio',
    'regex',
    'scoped_allocator',
    'set',
    'slist',
    'sstream',
    'stack',
    'stdexcept',
    'streambuf',
    'string',
    'strstream',
    'system_error',
    'thread',
    'tuple',
    'type_traits', #C++11, doesn't exist yet
    'typeindex',
    'typeinfo',
    'unordered_map',
    'unordered_set',
    'utility',
    'valarray',
    'vector',
]

def get_args():
    parser = argparse.ArgumentParser(
        prog='std2bsl',
        description='Replaces std types and includes with the bsl version.',
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        'infile',
        nargs='+',
        help='input file(s)'
    )
    parser.add_argument(
        '-n',
        '--dry-run',
        action="store_true",
        dest="dryrun",
        default=False,
        help='report if any files need to be converted'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action="store_true",
        default=False,
        help='run silently'
    )
    parser.add_argument(
        '--no-backup',
        action="store_false",
        dest="backup",
        default=True,
        help='do not backup <infile> to <infile>.bak'
    )
    parser.add_argument(
        '--ignore-comments',
        action="store_true",
        dest="ignore_comments",
        default=False,
        help='ignore comments when checking a file'
    )
    parser.add_argument(
        '--output-dir',
        default=None,
        help='optional output directory to store updated files',
    )
    parser.add_argument(
        '--keep-std',
        default=None,
        help='optional input config file specifying functions that should be made native_std instead of bsl',
    )
    return parser.parse_args()


def remove_comments(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " "
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)


def check_for_std(text):
    if re.search(
            r'(namespace\s+std(?=(\W|$))|(?<!\w)std(?=\s*::))', text):
        return(1)

    bsl_inc = []
    def_bsl = []

    for item in cpp_headers:
        bsl_inc.append('<%s>' % item)
        def_bsl.append('INCLUDED_%s' % item.upper())

    incregex = re.compile('#\s*include\s*(%s)(\W|$)' % '|'.join(map(re.escape, bsl_inc)))
    defregex = re.compile('(define|ifndef)\s+(%s)\W' % '|'.join(map(re.escape, def_bsl)))

    if incregex.search(text): return(1)
    if defregex.search(text): return(1)


def replace_std(text, filename):
    bsl_inc = {'<%s>' % item: '<bsl_%s.h>' % item for item in cpp_headers}
    def_bsl = {'INCLUDED_%s' % item.upper(): 'INCLUDED_BSL_%s' % item.upper()
            for item in cpp_headers}

    for key in bsl_inc:
        # replace #include
        text = re.sub(
            r'#\s*include\s*%s' % re.escape(key),
            '#include %s' % bsl_inc[key],
            text
        )
    for key in def_bsl:
        # replace #define
        text = re.sub(
            r'#\s*define\s*%s\W' % re.escape(key),
            '#define %s\n' % def_bsl[key],
            text
        )
        # replace #ifndef
        text = re.sub(
            r'#\s*ifndef\s*%s\W' % re.escape(key),
            '#ifndef %s\n' % def_bsl[key],
            text
        )
    # replace std::
    text = re.sub(
        r'(?<!\w)std(?=\s*::)',
        'bsl',
        text, flags=re.S
    )

    # replace bsl:: with native_std:: if a config file exists.
    if filename:
      with open(filename) as ignored:
        ignore_pat = '(' + r'|'.join(map(lambda x: re.escape(x.rstrip()), ignored.readlines())) + ')'
        text = re.sub(
            r'(?<!\w)bsl(?=\s*::\s*' + ignore_pat + r'(\W+|\Z))',
            'native_std',
            text, flags=re.S
        )

    # replace namespace std
    text = re.sub(
        r'namespace\s+std(?=(\W|$))',
        'namespace bsl',
        text, flags=re.S
    )
    return text


def readin(ifname):
    with open(ifname, 'r') as ifile:
        content = ifile.read()
    return content


def writeout(ofname, text):
    with open(ofname, 'w') as file:
        file.write(text)


def main():
    args = get_args()

    if args.ignore_comments and not args.dryrun:
        sys.stderr.write("--ignore-comments can only be used with --dry-run")
        exit(2)

    files = 0

    if args.output_dir and not args.dryrun:
        if not os.path.exists(args.output_dir):
            os.makedirs(args.output_dir)

    for ifname in args.infile:
        intext = readin(ifname)
        if args.ignore_comments:
            intext = remove_comments(intext)
        if args.dryrun:
            if check_for_std(intext):
                if not args.quiet:
                    print ifname
                files += 1
            continue

        outtext = replace_std(intext, args.keep_std)
        if outtext != intext:
            if not args.quiet:
                print ifname
            if args.output_dir:
                ofname = os.path.join(args.output_dir,
                        os.path.basename(ifname))
            else:
                ofname = ifname
                if args.backup:
                    os.rename(ifname, '%s.bak' % ifname)
            writeout(ofname, outtext)
        files += 1

    if args.dryrun and files > 0:
        exit(1)


if __name__ == "__main__":
    main()
